class LocalDb{#t;#e;#a;#s=null;#r=!1;#o;constructor({apiUrl:t,dbName:e,storeName:a}){this.#t=t,this.#e=e,this.#a=a,this.ready=new Promise((t=>{this.#o=t})),this.checkAndFetchData()}async checkAndFetchData(){const t=await this.getLastInsertTimeFromDB(),e=await this.getLastUpdateTimeFromDB();if(e&&this.isToday(e.lastUpdateTime))console.log("資料已是今日最新，無需更新。"),this.#s=t.lastInsertTime;else{const e=await this.fetchDataFromApi(t.lastInsertTime);this.shouldUpdateData(e.lastInsertTime)&&await this.updateLocalData(e),this.#s=e.lastInsertTime}this.#r=!0,this.#o()}async fetchDataFromApi(t){const e=await fetch(this.#t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({LastInsertTime:t})});if(!e.ok)throw new Error("Failed to fetch data");return e.json()}shouldUpdateData(t){return t!==this.#s}async updateLocalData(t){const e=(await this.openDatabase()).transaction([this.#a],"readwrite"),a=e.objectStore(this.#a);for(const e of t.keys)a.put({Key:e.key});return a.put({Key:"lastInsertTime",lastInsertTime:t.lastInsertTime}),a.put({Key:"lastUpdateTime",lastUpdateTime:new Date}),new Promise(((t,a)=>{e.oncomplete=()=>t(),e.onerror=t=>a(t)}))}async openDatabase(){return new Promise(((t,e)=>{const a=indexedDB.open(this.#e,1);a.onupgradeneeded=t=>{const e=t.target.result;e.objectStoreNames.contains(this.#a)||e.createObjectStore(this.#a,{keyPath:"Key"})},a.onsuccess=e=>t(e.target.result),a.onerror=t=>e(t)}))}async getLastInsertTimeFromDB(){const t=(await this.openDatabase()).transaction([this.#a],"readonly").objectStore(this.#a);return new Promise(((e,a)=>{const s=t.get("lastInsertTime");s.onsuccess=t=>{const a=t.target.result;e(a||null)},s.onerror=t=>a(t)}))}async getLastUpdateTimeFromDB(){const t=(await this.openDatabase()).transaction([this.#a],"readonly").objectStore(this.#a);return new Promise(((e,a)=>{const s=t.get("lastUpdateTime");s.onsuccess=t=>{const a=t.target.result;e(a||null)},s.onerror=t=>a(t)}))}isToday(t){const e=new Date,a=new Date(t);return e.getFullYear()===a.getFullYear()&&e.getMonth()===a.getMonth()&&e.getDate()===a.getDate()}async getData(){this.#r||await this.ready;const t=(await this.openDatabase()).transaction([this.#a],"readonly").objectStore(this.#a);return new Promise(((e,a)=>{const s=t.getAll();s.onsuccess=t=>e(t.target.result),s.onerror=t=>a(t)}))}}